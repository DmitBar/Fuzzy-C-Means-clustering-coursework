# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib import pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure
from FuzzyCMeans import FuzzyCMeans


# класс для показа графика в PyQt5
class MplCanvas(FigureCanvasQTAgg):
    def __init__(self, parent=None, width=10, height=10, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)


# класс, наследуется от QThread для выполнения кластеризации в отдельном потоке
class Thread(QtCore.QThread):
    _signal = QtCore.pyqtSignal(int)

    def __init__(self, dataset_file_path, clusters_count, max_iterations, fuzzy_parameter):
        self.dataset_file_path = dataset_file_path
        self.clusters_count = clusters_count
        self.max_iterations = max_iterations
        self.fuzzy_parameter = fuzzy_parameter
        # self.window = window
        super(Thread, self).__init__()

    def __del__(self):
        self.wait()

    # главная функция, запускает обучение
    def run(self):
        model = FuzzyCMeans(self.dataset_file_path, self.clusters_count, self.max_iterations, self.fuzzy_parameter)
        self.cluster_labels, self.cluster_centers, self.acc, self.df, self.df_full, self.membership_mat = model.execute_clustering(
            self._signal)


# класс интерфейса пользователя
class Ui_Form(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(Ui_Form, self).__init__(parent=parent)

        self.setWindowTitle("Кластеризация Fuzzy C-means")
        self.resize(800, 473)

        # для адаптивного интерфейса
        self.main_widget = QtWidgets.QWidget(self)
        self.main_widget.setFocus()
        self.setCentralWidget(self.main_widget)

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.main_widget)
        self.scrollArea = QtWidgets.QScrollArea(self.main_widget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollAreaWidgetContents = QtWidgets.QWidget()

        self.gridLayout = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout.setContentsMargins(2, 2, 2, 2)
        self.gridLayout.setObjectName("gridLayout")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout.addLayout(self.verticalLayout, 0, 2, 1, 1)

        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.gridLayout.addLayout(self.verticalLayout_2, 1, 2, 1, 1)

        self.select_dataset_btn = QtWidgets.QPushButton()
        self.select_dataset_btn.setObjectName("pushButton")
        self.select_dataset_btn.clicked.connect(self.select_dataset_btn_clicked)
        self.gridLayout.addWidget(self.select_dataset_btn, 0, 0, 1, 1)

        self.execute_clustering_btn = QtWidgets.QPushButton()
        self.execute_clustering_btn.setObjectName("pushButton")
        self.execute_clustering_btn.clicked.connect(self.execute_clustering_btn_clicked)
        self.gridLayout.addWidget(self.execute_clustering_btn, 1, 0, 1, 1)

        self.visualize_clusters_btn = QtWidgets.QPushButton()
        self.visualize_clusters_btn.setObjectName("pushButton")
        self.visualize_clusters_btn.clicked.connect(self.visualize_clusters_btn_clicked)
        self.gridLayout.addWidget(self.visualize_clusters_btn, 2, 0, 1, 1)

        self.calculate_loss_function_btn = QtWidgets.QPushButton()
        self.calculate_loss_function_btn.setObjectName("pushButton")
        self.calculate_loss_function_btn.clicked.connect(self.calculate_loss_function_btn_clicked)
        self.gridLayout.addWidget(self.calculate_loss_function_btn, 3, 0, 1, 1)

        self.export_to_csv_btn = QtWidgets.QPushButton()
        self.export_to_csv_btn.setObjectName("pushButton")
        self.export_to_csv_btn.clicked.connect(self.export_to_csv_btn_clicked)
        self.gridLayout.addWidget(self.export_to_csv_btn, 4, 0, 1, 1)

        self.clusters_count_edit = QtWidgets.QLineEdit()
        self.clusters_count_edit.setObjectName("clusters_count_edit")
        self.gridLayout.addWidget(self.clusters_count_edit, 0, 1, 1, 1)

        self.max_iterations_edit = QtWidgets.QLineEdit()
        self.max_iterations_edit.setObjectName("max_iterations_edit")
        self.gridLayout.addWidget(self.max_iterations_edit, 1, 1, 1, 1)

        self.fuzzy_parameter_edit = QtWidgets.QLineEdit()
        self.fuzzy_parameter_edit.setObjectName("fuzzy_parameter_edit")
        self.gridLayout.addWidget(self.fuzzy_parameter_edit, 2, 1, 1, 1)

        self.clusters_centers_label = QtWidgets.QLabel()
        self.clusters_centers_label.setObjectName("clusters_centers_label")
        self.gridLayout.addWidget(self.clusters_centers_label, 4, 1, 1, 1)

        self.SSE_label = QtWidgets.QLabel()
        self.SSE_label.setObjectName("criteriasCountEdit")
        self.gridLayout.addWidget(self.SSE_label, 5, 1, 1, 1)

        self.progressBar = QtWidgets.QProgressBar()
        self.progressBar.setValue(0)
        self.gridLayout.addWidget(self.progressBar, 3, 1, 1, 1)

        self.dataset_file_path = ""

        self.cluster_labels = None
        self.cluster_centers = None
        self.df = None
        self.df_full = None

        self.horizontalLayout.addWidget(self.scrollArea)

        self.retranslateUi()

    # описание кнопок и текстовых полей
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.select_dataset_btn.setText(_translate("MainWindow", "Выбрать набор данных"))
        self.execute_clustering_btn.setText(_translate("MainWindow", "Кластеризовать"))
        self.visualize_clusters_btn.setText(_translate("MainWindow", "Визуализировать"))
        self.calculate_loss_function_btn.setText(_translate("MainWindow", "Посчитать ошибку"))
        self.export_to_csv_btn.setText(_translate("MainWindow", "Экспортировать в csv"))
        self.clusters_count_edit.setPlaceholderText(_translate("MainWindow", "Число кластеров"))
        self.max_iterations_edit.setPlaceholderText(_translate("MainWindow", "Макс. кол-во итераций"))
        self.fuzzy_parameter_edit.setPlaceholderText(_translate("MainWindow", "Параметр нечеткости"))

    # процедура нажатия по кнопке выбора набора данных
    def select_dataset_btn_clicked(self):
        file, check = QtWidgets.QFileDialog.getOpenFileName(None, "Выберите набор данных", "", "CSV-файлы (*.csv)")

        if check:
            self.dataset_file_path = file

    # процедура нажатия по кнопке Кластеризовать
    def execute_clustering_btn_clicked(self):
        # считываем значения из текстовых полей: кол-во кластеров, кол-ов итераций, параметр нечеткости
        self.clusters_count = self.clusters_count_edit.text()
        self.max_iterations = self.max_iterations_edit.text()
        self.fuzzy_parameter = self.fuzzy_parameter_edit.text()

        # обработка ошибки в случае пустых полей
        msg = QtWidgets.QMessageBox()

        if self.dataset_file_path == "" or self.clusters_count == "" or self.max_iterations == "" or self.fuzzy_parameter == "":
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setInformativeText('Укажите все необходимые параметры!')
            msg.setWindowTitle("Ошибка")
            msg.exec_()
            return

        self.thread_train = Thread(self.dataset_file_path, int(self.clusters_count), int(self.max_iterations),
                                   float(self.fuzzy_parameter))
        # self.thread_train = Thread("C:/Users/Admin/Downloads/wine-clustering.csv", 4, 100, 1.7)

        self.thread_train._signal.connect(self.generated_signal_train)
        self.thread_train.finished.connect(self.clustering_finished)
        self.thread_train.start()
        self.execute_clustering_btn.setEnabled(False)
        self.visualize_clusters_btn.setEnabled(False)
        self.calculate_loss_function_btn.setEnabled(False)
        self.export_to_csv_btn.setEnabled(False)

    # функция самовызова, вызывается при завершении процесса кластеризации и записывает результаты в память
    def clustering_finished(self):
        msg_box = QtWidgets.QMessageBox()
        msg_box.setInformativeText('Обучение завершено!')
        msg_box.setWindowTitle("Сообщение")
        msg_box.exec_()

        self.cluster_labels, self.cluster_centers, self.acc, self.df, self.df_full, self.membership_mat = self.thread_train.cluster_labels, self.thread_train.cluster_centers, self.thread_train.acc, self.thread_train.df, self.thread_train.df_full, self.thread_train.membership_mat

        self.progressBar.setValue(0)
        self.execute_clustering_btn.setEnabled(True)
        self.visualize_clusters_btn.setEnabled(True)
        self.calculate_loss_function_btn.setEnabled(True)
        self.export_to_csv_btn.setEnabled(True)

    # функция самовызова для получения информации об обучении; обновление значения прогресс бара
    def generated_signal_train(self, msg):
        self.progressBar.setValue(int(msg))

    # процедура нажатия по кнопке Визуализировать
    def visualize_clusters_btn_clicked(self):
        if self.cluster_labels == None and self.cluster_centers == None:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setInformativeText('Сначала проведите кластеризацию')
            msg.setWindowTitle("Ошибка")
            msg.exec_()
            return

        # self.fuzzy_c_means = FuzzyCMeans("C:/Users/Admin/Downloads/wine-clustering.csv", 3, 100, 1.7)
        self.fuzzy_c_means = FuzzyCMeans(self.dataset_file_path, int(self.clusters_count), int(self.max_iterations),
                                         float(self.fuzzy_parameter))

        sepal_df, pos, X, Y, Z1 = self.fuzzy_c_means.final_clusters(self.cluster_labels, self.cluster_centers, self.df,
                                                                    self.df_full, int(self.clusters_count))

        # рисуем график
        colorss = ["r", "g", "b", "m", "c"]

        self.canvas = MplCanvas(parent=None, width=10, height=10, dpi=100)
        for i in range(int(self.clusters_count)):
            # for i in range(4):
            self.canvas.axes.scatter(sepal_df[:, 0], sepal_df[:, 1], marker='o')
            self.canvas.axes.contour(X, Y, Z1[i].pdf(pos), colors=colorss[i], alpha=0.5)

        self.canvas.axes.axis('equal')
        self.canvas.axes.set_xlabel(self.df.columns[0], fontsize=16)
        self.canvas.axes.set_ylabel(self.df.columns[1], fontsize=16)
        self.canvas.axes.set_title('Кластеры', fontsize=22)
        self.canvas.axes.grid()

        self.gridLayout.addWidget(self.canvas, 0, 2, 10, 10)

    # процедура нажатия по кнопке Посчитать ошибку
    def calculate_loss_function_btn_clicked(self):
        rows_count = self.df.shape[0]
        SSE_euclidean = self.fuzzy_c_means.calculate_loss_function(self.membership_mat, self.cluster_centers, self.df,
                                                                   int(self.clusters_count), rows_count)
        SSE_manhattan = self.fuzzy_c_means.calculate_loss_function_manhattan(self.membership_mat, self.cluster_centers,
                                                                             self.df, int(self.clusters_count),
                                                                             rows_count)

        self.SSE_label.setText("Значение функции потерь (SSE, Эвклидово расстояние) = " + str(SSE_euclidean) + "\n" +
                               "Значение функции потерь (SSE, Манхэттэнское расстояние) = " + str(SSE_manhattan))

    # процедура нажатия по кнопке Экспортировать в csv
    def export_to_csv_btn_clicked(self):
        exported = self.fuzzy_c_means.export_to_csv(self.cluster_labels, self.df)
        msg = QtWidgets.QMessageBox()

        if exported == True:
            msg.setInformativeText('Данные успешно сохранены в файл results.csv')
            msg.setWindowTitle("Сообщение")
            msg.exec_()
        else:
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setInformativeText('Произошла ошибка, проверьте правильность набора данных и массив кластеров')
            msg.setWindowTitle("Ошибка")
            msg.exec_()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = Ui_Form()
    MainWindow.show()
    sys.exit(app.exec_())
